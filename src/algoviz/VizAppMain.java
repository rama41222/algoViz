/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package algoviz;

import java.awt.Color;
import java.awt.event.KeyEvent;
import static java.lang.System.exit;
import java.util.Arrays;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Rama41222
 */
public class VizAppMain extends javax.swing.JFrame implements Runnable {

    Thread play;
    JLabel larr[];
    int arr[];
    int algo;
    boolean order;

    /**
     * Creates new form VizAppMain
     */
    public VizAppMain() {
        initComponents();
        Algo.setEditable(false);
        play = new Thread(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        seven = new javax.swing.JTextField();
        five = new javax.swing.JTextField();
        three = new javax.swing.JTextField();
        six = new javax.swing.JTextField();
        four = new javax.swing.JTextField();
        eight = new javax.swing.JTextField();
        one = new javax.swing.JTextField();
        two = new javax.swing.JTextField();
        randomize = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        sel = new javax.swing.JComboBox<>();
        sort = new javax.swing.JButton();
        init = new javax.swing.JButton();
        asc = new javax.swing.JRadioButton();
        des = new javax.swing.JRadioButton();
        init1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        reset = new javax.swing.JButton();
        jlp = new javax.swing.JPanel();
        v3 = new javax.swing.JLabel();
        v2 = new javax.swing.JLabel();
        v4 = new javax.swing.JLabel();
        v5 = new javax.swing.JLabel();
        v6 = new javax.swing.JLabel();
        v7 = new javax.swing.JLabel();
        v8 = new javax.swing.JLabel();
        v1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Algo = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);

        jPanel1.setBackground(new java.awt.Color(38, 50, 56));

        jLabel4.setFont(new java.awt.Font("Avenir Next", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("AlgoViz");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(55, 71, 79));

        jPanel4.setBackground(new java.awt.Color(55, 71, 79));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input Numbers", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        seven.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        seven.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        seven.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sevenKeyTyped(evt);
            }
        });

        five.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        five.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        five.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fiveKeyTyped(evt);
            }
        });

        three.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        three.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        three.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                threeKeyTyped(evt);
            }
        });

        six.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        six.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        six.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sixKeyTyped(evt);
            }
        });

        four.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        four.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        four.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fourKeyTyped(evt);
            }
        });

        eight.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        eight.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        eight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                eightKeyTyped(evt);
            }
        });

        one.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        one.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        one.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                oneKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                oneKeyReleased(evt);
            }
        });

        two.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        two.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        two.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                twoKeyTyped(evt);
            }
        });

        randomize.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        randomize.setText("Set Random");
        randomize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(randomize))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(randomize))
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(55, 71, 79));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select an Algorithm -> Initialize -> Draw Graph -> Select Order -> Sort", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        sel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        sel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select an Algorithm", "Bubble Sort", "Selection Sort", "Insertion Sort", "Quick Sort" }));
        sel.setEnabled(false);

        sort.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        sort.setText("Sort");
        sort.setEnabled(false);
        sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortActionPerformed(evt);
            }
        });

        init.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        init.setText("Draw Graph");
        init.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initActionPerformed(evt);
            }
        });

        asc.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        asc.setForeground(new java.awt.Color(255, 255, 255));
        asc.setSelected(true);
        asc.setText("Ascending");
        asc.setEnabled(false);
        asc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascActionPerformed(evt);
            }
        });

        des.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        des.setForeground(new java.awt.Color(255, 255, 255));
        des.setText("Descending");
        des.setEnabled(false);
        des.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desActionPerformed(evt);
            }
        });

        init1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        init1.setText("Get values");
        init1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                init1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(init1)
                .addGap(18, 18, 18)
                .addComponent(init, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(asc)
                .addGap(18, 18, 18)
                .addComponent(des)
                .addGap(18, 18, 18)
                .addComponent(sort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(init)
                    .addComponent(sort)
                    .addComponent(asc)
                    .addComponent(des)
                    .addComponent(init1))
                .addContainerGap())
        );

        jPanel6.setBackground(new java.awt.Color(55, 71, 79));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Reset Values", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        reset.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        reset.setText("Reset");
        reset.setEnabled(false);
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reset, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reset)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jlp.setBackground(new java.awt.Color(255, 255, 255));

        v3.setBackground(new java.awt.Color(255, 255, 255));
        v3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        v3.setForeground(new java.awt.Color(255, 255, 255));
        v3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        v3.setAlignmentY(0.0F);
        v3.setDoubleBuffered(true);
        v3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        v3.setOpaque(true);

        v2.setBackground(new java.awt.Color(255, 255, 255));
        v2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        v2.setForeground(new java.awt.Color(255, 255, 255));
        v2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        v2.setAlignmentY(0.0F);
        v2.setDoubleBuffered(true);
        v2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        v2.setOpaque(true);

        v4.setBackground(new java.awt.Color(255, 255, 255));
        v4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        v4.setForeground(new java.awt.Color(255, 255, 255));
        v4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        v4.setAlignmentY(0.0F);
        v4.setDoubleBuffered(true);
        v4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        v4.setOpaque(true);

        v5.setBackground(new java.awt.Color(255, 255, 255));
        v5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        v5.setForeground(new java.awt.Color(255, 255, 255));
        v5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v5.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        v5.setAlignmentY(0.0F);
        v5.setDoubleBuffered(true);
        v5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        v5.setOpaque(true);

        v6.setBackground(new java.awt.Color(255, 255, 255));
        v6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        v6.setForeground(new java.awt.Color(255, 255, 255));
        v6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v6.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        v6.setAlignmentY(0.0F);
        v6.setDoubleBuffered(true);
        v6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        v6.setOpaque(true);

        v7.setBackground(new java.awt.Color(255, 255, 255));
        v7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        v7.setForeground(new java.awt.Color(255, 255, 255));
        v7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v7.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        v7.setAlignmentY(0.0F);
        v7.setDoubleBuffered(true);
        v7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        v7.setOpaque(true);

        v8.setBackground(new java.awt.Color(255, 255, 255));
        v8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        v8.setForeground(new java.awt.Color(255, 255, 255));
        v8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v8.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        v8.setAlignmentY(0.0F);
        v8.setDoubleBuffered(true);
        v8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        v8.setOpaque(true);

        v1.setBackground(new java.awt.Color(255, 255, 255));
        v1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        v1.setForeground(new java.awt.Color(255, 255, 255));
        v1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        v1.setAlignmentY(0.0F);
        v1.setDoubleBuffered(true);
        v1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        v1.setOpaque(true);

        javax.swing.GroupLayout jlpLayout = new javax.swing.GroupLayout(jlp);
        jlp.setLayout(jlpLayout);
        jlpLayout.setHorizontalGroup(
            jlpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jlpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(v1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(v2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(v3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(v4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(v5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(v6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(v7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(v8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jlpLayout.setVerticalGroup(
            jlpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jlpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jlpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(v1)
                    .addComponent(v2)
                    .addComponent(v3)
                    .addComponent(v4)
                    .addComponent(v5)
                    .addComponent(v6)
                    .addComponent(v7)
                    .addComponent(v8))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Algo.setColumns(20);
        Algo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        Algo.setLineWrap(true);
        Algo.setRows(5);
        Algo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(Algo);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
        );

        jMenu1.setText("Algorithm Help");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, 0));
        jMenuItem1.setText("Help");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, 0));
        jMenuItem3.setText("About AlgoViz");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jlp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initActionPerformed
        larr = new JLabel[]{v1, v2, v3, v4, v5, v6, v7, v8};
        int a = Integer.parseInt(one.getText());
        int b = Integer.parseInt(two.getText());
        int c = Integer.parseInt(three.getText());
        int d = Integer.parseInt(four.getText());
        int e = Integer.parseInt(five.getText());
        int f = Integer.parseInt(six.getText());
        int g = Integer.parseInt(seven.getText());
        int h = Integer.parseInt(eight.getText());

        arr = new int[]{a, b, c, d, e, f, g, h};
        int tot = sum(arr);

        v1.setSize(40, (int) Adj(a, tot));
        v1.setBackground(Color.decode("#03A9F4"));

        v2.setSize(40, (int) Adj(b, tot));
        v2.setBackground(Color.decode("#03A9F4"));

        v3.setSize(40, (int) Adj(c, tot));
        v3.setBackground(Color.decode("#03A9F4"));

        v4.setSize(40, (int) Adj(d, tot));
        v4.setBackground(Color.decode("#03A9F4"));

        v5.setSize(40, (int) Adj(e, tot));
        v5.setBackground(Color.decode("#03A9F4"));

        v6.setSize(40, (int) Adj(f, tot));
        v6.setBackground(Color.decode("#03A9F4"));

        v7.setSize(40, (int) Adj(g, tot));
        v7.setBackground(Color.decode("#03A9F4"));

        v8.setSize(40, (int) Adj(h, tot));
        v8.setBackground(Color.decode("#03A9F4"));

        sel.setEnabled(true);
        asc.setEnabled(true);
        des.setEnabled(true);
        sort.setEnabled(true);

    }//GEN-LAST:event_initActionPerformed

    private void oneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_oneKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || !((c == KeyEvent.VK_BACK_SPACE) || !(c == KeyEvent.VK_DELETE) || !(c == KeyEvent.VK_LEFT) || !(c == KeyEvent.VK_RIGHT)))) {
            evt.consume();
        }
    }//GEN-LAST:event_oneKeyTyped

    private void oneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_oneKeyReleased

    }//GEN-LAST:event_oneKeyReleased

    private void init1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_init1ActionPerformed
        
        int em = 0;
        if (one.getText().trim().length()==0){
           em++;
        }  
       
        if(two.getText().trim().length()==0) {
                em++;
        }
        
        if(three.getText().trim().length()==0) {
               em++;
        }
                
        if(four.getText().trim().length()==0) {
           em++;
        }
        if(five.getText().trim().length()==0) {
          em++;
        }
        if(six.getText().trim().length()==0 ){
          em++;
        }
        if(seven.getText().trim().length()==0) {
              em++;
        
        }
        if(eight.getText().trim().length()==0) {
               em++;
        }      
            if(em==0){  
                System.out.println(em);
            v1.setText(one.getText());
            v1.setBackground(Color.decode("#03A9F4"));
            v2.setText(two.getText());
            v2.setBackground(Color.decode("#03A9F4"));
            v3.setText(three.getText());
            v3.setBackground(Color.decode("#03A9F4"));
            v4.setText(four.getText());
            v4.setBackground(Color.decode("#03A9F4"));
            v5.setText(five.getText());
            v5.setBackground(Color.decode("#03A9F4"));
            v6.setText(six.getText());
            v6.setBackground(Color.decode("#03A9F4"));
            v7.setText(seven.getText());
            v7.setBackground(Color.decode("#03A9F4"));
            v8.setText(eight.getText());
            v8.setBackground(Color.decode("#03A9F4"));
            
            }else{
                System.out.println(em);
            JOptionPane.showMessageDialog(rootPane, "Text Fields  Can't Be Empty");    
            }
            
            
           
        
    }//GEN-LAST:event_init1ActionPerformed

    private void sortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortActionPerformed
        if (sel.getSelectedIndex() == 1 && asc.isSelected() == true) {
            algo = 1;
            order = false;
        }

        if (sel.getSelectedIndex() == 1 && des.isSelected() == true) {
            algo = 1;
            order = true;
        }

        if (sel.getSelectedIndex() == 2 && asc.isSelected() == true) {
            algo = 2;
            order = false;
        }

        if (sel.getSelectedIndex() == 2 && des.isSelected() == true) {
            algo = 2;
            order = true;
        }

        if (sel.getSelectedIndex() == 3 && asc.isSelected() == true) {
            algo = 3;
            order = false;

        }

        if (sel.getSelectedIndex() == 3 && des.isSelected() == true) {
            algo = 3;
            order = true;

        }

        if (sel.getSelectedIndex() == 4 && asc.isSelected() == true) {
            algo = 4;
            order = false;

        }

        if (sel.getSelectedIndex() == 4 && des.isSelected() == true) {
            algo = 4;
            order = true;

        }

        if (sel.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Please Select an Algorithm First");

        } else {
            play.start();
            init.setEnabled(false);
            init1.setEnabled(false);
            sort.setEnabled(false);
            reset.setEnabled(true);
            sel.setEnabled(false);
            asc.setEnabled(false);
            des.setEnabled(false);
        }
    }//GEN-LAST:event_sortActionPerformed

    private void ascActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascActionPerformed
        des.setSelected(false);
    }//GEN-LAST:event_ascActionPerformed

    private void desActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desActionPerformed
        asc.setSelected(false);
    }//GEN-LAST:event_desActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        new VizAppMain().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_resetActionPerformed

    private void randomizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomizeActionPerformed
        randomGen();
        randomize.setEnabled(false);
        init1.setEnabled(false);
    }//GEN-LAST:event_randomizeActionPerformed

    private void twoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_twoKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || !((c == KeyEvent.VK_BACK_SPACE) || !(c == KeyEvent.VK_DELETE) || !(c == KeyEvent.VK_LEFT) || !(c == KeyEvent.VK_RIGHT)))) {
            evt.consume();
        }
    }//GEN-LAST:event_twoKeyTyped

    private void threeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_threeKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || !((c == KeyEvent.VK_BACK_SPACE) || !(c == KeyEvent.VK_DELETE) || !(c == KeyEvent.VK_LEFT) || !(c == KeyEvent.VK_RIGHT)))) {
            evt.consume();
        }
    }//GEN-LAST:event_threeKeyTyped

    private void fourKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fourKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || !((c == KeyEvent.VK_BACK_SPACE) || !(c == KeyEvent.VK_DELETE) || !(c == KeyEvent.VK_LEFT) || !(c == KeyEvent.VK_RIGHT)))) {
            evt.consume();
        }
    }//GEN-LAST:event_fourKeyTyped

    private void fiveKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fiveKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || !((c == KeyEvent.VK_BACK_SPACE) || !(c == KeyEvent.VK_DELETE) || !(c == KeyEvent.VK_LEFT) || !(c == KeyEvent.VK_RIGHT)))) {
            evt.consume();
        }
    }//GEN-LAST:event_fiveKeyTyped

    private void sixKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sixKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || !((c == KeyEvent.VK_BACK_SPACE) || !(c == KeyEvent.VK_DELETE) || !(c == KeyEvent.VK_LEFT) || !(c == KeyEvent.VK_RIGHT)))) {
            evt.consume();
        }
    }//GEN-LAST:event_sixKeyTyped

    private void sevenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sevenKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || !((c == KeyEvent.VK_BACK_SPACE) || !(c == KeyEvent.VK_DELETE) || !(c == KeyEvent.VK_LEFT) || !(c == KeyEvent.VK_RIGHT)))) {
            evt.consume();
        }
    }//GEN-LAST:event_sevenKeyTyped

    private void eightKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eightKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || !((c == KeyEvent.VK_BACK_SPACE) || !(c == KeyEvent.VK_DELETE) || !(c == KeyEvent.VK_LEFT) || !(c == KeyEvent.VK_RIGHT)))) {
            evt.consume();
        }
    }//GEN-LAST:event_eightKeyTyped

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        About a = new About();
        a.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Help h = new Help();
        h.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    void randomGen() {
        arr = new int[8];
        Random rn = new Random();
        for (int i = 0; i < 7; i++) {

            int result = rn.nextInt(500 - 10 + 1) + 10;
            System.out.println(result);
            arr[i] = result;

        }

        one.setText(arr[0] + "");
        two.setText(arr[1] + "");
        three.setText(arr[2] + "");
        four.setText(arr[3] + "");
        five.setText(arr[4] + "");
        six.setText(arr[5] + "");
        seven.setText(arr[6] + "");
        eight.setText(arr[7] + "");

        v1.setText(one.getText());
        v1.setBackground(Color.decode("#03A9F4"));
        v2.setText(two.getText());
        v2.setBackground(Color.decode("#03A9F4"));
        v3.setText(three.getText());
        v3.setBackground(Color.decode("#03A9F4"));
        v4.setText(four.getText());
        v4.setBackground(Color.decode("#03A9F4"));
        v5.setText(five.getText());
        v5.setBackground(Color.decode("#03A9F4"));
        v6.setText(six.getText());
        v6.setBackground(Color.decode("#03A9F4"));
        v7.setText(seven.getText());
        v7.setBackground(Color.decode("#03A9F4"));
        v8.setText(eight.getText());
        v8.setBackground(Color.decode("#03A9F4"));

    }

    int sum(int arr[]) {

        int tot = 0;
        for (int i = 0; i < arr.length; i++) {
            tot = tot + arr[i];
        }
        return tot;
    }

    float Adj(float x, float sum) {

        return ((x / sum) * jlp.getHeight() + 60);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VizAppMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VizAppMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VizAppMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VizAppMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VizAppMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Algo;
    private javax.swing.JRadioButton asc;
    private javax.swing.JRadioButton des;
    private javax.swing.JTextField eight;
    private javax.swing.JTextField five;
    private javax.swing.JTextField four;
    private javax.swing.JButton init;
    private javax.swing.JButton init1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jlp;
    private javax.swing.JTextField one;
    private javax.swing.JButton randomize;
    private javax.swing.JButton reset;
    private javax.swing.JComboBox<String> sel;
    private javax.swing.JTextField seven;
    private javax.swing.JTextField six;
    private javax.swing.JButton sort;
    private javax.swing.JTextField three;
    private javax.swing.JTextField two;
    private javax.swing.JLabel v1;
    private javax.swing.JLabel v2;
    private javax.swing.JLabel v3;
    private javax.swing.JLabel v4;
    private javax.swing.JLabel v5;
    private javax.swing.JLabel v6;
    private javax.swing.JLabel v7;
    private javax.swing.JLabel v8;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {

        //bubble sort
        if (order == false && algo == 1) {
            Algo.append("\tArray before sorting: " + Arrays.toString(arr) + "\n\n");
            int j;
            boolean flag = true;   // set flag to true to begin first pass
            int temp;   //holding variable
            int steps = 1;
            while (flag) {
                Algo.append("While( " + flag + " )\n\n");
                flag = false;    //set flag to false awaiting a possible swap
                for (j = 0; j < arr.length - 1; j++) {
                    Algo.append("\tfor (j = " + j + " ; " + j + " < " + arr.length + " - 1; j++)\n\n");
                    try {
                        color(j, j + 1);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(VizAppMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (arr[j] > arr[j + 1]) // change to > for ascending sort
                    {
                        Algo.append("\t\tif (arr[ " + j + " ] > arr[ " + (j + 1) + " ]) == TRUE \n");
                        temp = arr[j];                //swap elements
                        arr[j] = arr[j + 1];
                        arr[j + 1] = temp;
                        flag = true;
                        Algo.append("\n\t\texchange (arr[ " + j + " ] <-> arr[ " + (j + 1) + " ])\n\n");
                        JLabel tmp = larr[j];
                        larr[j] = larr[j + 1];
                        larr[j + 1] = tmp;
                        try {
                            swap(j, j + 1);//shows a swap occurred
                        } catch (InterruptedException ex) {
                            Logger.getLogger(VizAppMain.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                Algo.append("\n\n\tArray after step " + steps + " : " + Arrays.toString(arr) + "\n\n");
                steps++;
            }
            Algo.append("\n WHILE(FALSE) Exit While loop \n");
            order = false;
            algo = 0;
        }

        if (order == true && algo == 1) {
            Algo.append("\tArray before sorting: " + Arrays.toString(arr) + "\n\n");
            int j;
            boolean flag = true;   // set flag to true to begin first pass
            int temp;   //holding variable
            int steps = 1;
            while (flag) {
                Algo.append("While( " + flag + " )\n\n");
                flag = false;    //set flag to false awaiting a possible swap
                for (j = 0; j < arr.length - 1; j++) {
                    Algo.append("\tfor (j = " + j + " ; " + j + " < " + arr.length + " - 1; j++)\n\n");
                    try {
                        color(j, j + 1);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(VizAppMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (arr[j] < arr[j + 1]) // change to > for ascending sort
                    {
                        Algo.append("\t\tif (arr[ " + j + " ] > arr[ " + (j + 1) + " ]) == TRUE \n");
                        temp = arr[j];                //swap elements
                        arr[j] = arr[j + 1];
                        arr[j + 1] = temp;
                        flag = true;
                        Algo.append("\n\t\texchange (arr[ " + j + " ] <-> arr[ " + (j + 1) + " ])\n\n");
                        JLabel tmp = larr[j];
                        larr[j] = larr[j + 1];
                        larr[j + 1] = tmp;

                        try {
                            swap(j, j + 1);//shows a swap occurred
                        } catch (InterruptedException ex) {
                            Logger.getLogger(VizAppMain.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                Algo.append("\n\n\tArray after step " + steps + " : " + Arrays.toString(arr) + "\n\n");
                steps++;
            }
            Algo.append("\n WHILE(FALSE) Exit While loop \n");
            order = false;
            algo = 0;
        }

        //Selection Sort
        if (order == false && algo == 2) {
            Algo.append("\tArray before sorting: " + Arrays.toString(arr) + "\n\n");
            Algo.append("Selection Sort Starting up...\n");
            for (int a = 0; a < arr.length - 1; a++) {
                Algo.append("for (int a = " + a + " ; " + a + " < " + arr.length + " - 1; a++)\n");
                int min = a;
                Algo.append("\tmin <- " + a + "\n\n");
                for (int b = a + 1; b < arr.length; b++) {
                    Algo.append("\tfor (int b = " + (a + 1) + " ; " + b + " < " + arr.length + " ; b++)\n");
                    try {
                        color(a, min);
                    } catch (InterruptedException ex) {
                        JOptionPane.showMessageDialog(rootPane, ex);
                    }
                    try {
                        insertCol(b);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(VizAppMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (arr[b] < arr[min]) {
                        Algo.append("\t\tif (arr[ " + b + " ] < arr[" + min + "]) == TRUE \n");
                        min = b;
                        Algo.append("\t\tmin <- " + b + "\n\n");

                    }
                }

                int temp = arr[min];
                arr[min] = arr[a];
                arr[a] = temp;

                JLabel tmp = larr[min];
                larr[min] = larr[a];
                larr[a] = tmp;
                Algo.append("\n\texchange (arr[ " + min + " ] <-> arr[ " + a + " ])\n\n");
                try {

                    swap(a, min);
                } catch (InterruptedException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex);
                }
                Algo.append("\n\n\tArray after step " + (a + 1) + " : " + Arrays.toString(arr) + "\n\n");
            }

            Algo.append("\n EXIT nested  for loop\n");
            order = false;
            algo = 0;

        }

        if (order == true && algo == 2) {
            Algo.append("\tArray before sorting: " + Arrays.toString(arr) + "\n\n");
            Algo.append("Selection Sort Starting up...\n");
            for (int a = 0; a < arr.length - 1; a++) {
                Algo.append("for (int a = " + a + " ; " + a + " < " + arr.length + " - 1; a++)\n");
                int min = a;
                Algo.append("\tmin <- " + a + "\n\n");
                for (int b = a + 1; b < arr.length; b++) {
                    Algo.append("\tfor (int b = " + (a + 1) + " ; " + b + " < " + arr.length + " ; b++)\n");
                    try {
                        color(a, min);
                    } catch (InterruptedException ex) {
                        JOptionPane.showMessageDialog(rootPane, ex);
                    }
                    if (arr[b] > arr[min]) {
                        Algo.append("\t\tif (arr[ " + b + " ] < arr[" + min + "]) == TRUE \n");
                        min = b;
                        Algo.append("\t\tmin <- " + b + "\n\n");

                    }
                }

                int temp = arr[min];
                arr[min] = arr[a];
                arr[a] = temp;

                JLabel tmp = larr[min];
                larr[min] = larr[a];
                larr[a] = tmp;
                Algo.append("\n\texchange (arr[ " + min + " ] <-> arr[ " + a + " ])\n\n");
                try {

                    swap(a, min);
                } catch (InterruptedException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex);
                }
                Algo.append("\n\n\tArray after step " + (a + 1) + " : " + Arrays.toString(arr) + "\n\n");

            }

            Algo.append("\n EXIT nested  for loop\n");
            order = false;
            algo = 0;

        }

        //Insertion Sort
        if (order == false && algo == 3) {
            int steps = 1;
            Algo.append("\tArray before sorting: " + Arrays.toString(arr) + "\n\n");
            Algo.append("\tInsertion Sort Starting up...\n\n");
            for (int j = 1; j < arr.length; j++) {
                Algo.append("\tfor (int j = " + j + " ; " + j + " < " + arr.length + "; j++)\n");
                int key = arr[j];
                Algo.append("\tkey <- " + arr[j] + "\n");
                JLabel tmp = larr[j];
                int i = j - 1;
                Algo.append("\ti <- " + (j - 1) + "\n");
                try {
                    insertCol(j);
                } catch (InterruptedException ex) {
                    Logger.getLogger(VizAppMain.class.getName()).log(Level.SEVERE, null, ex);
                }
                while (i >= 0 && arr[i] > key) {
                    Algo.append("\n\t\twhile(" + i + " >= 0 && arr[" + i + "] > " + key + ")\n");
                    try {
                        color(i + 1, i);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(VizAppMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    arr[i + 1] = arr[i];
                    Algo.append("\t\t arr[" + (i + 1) + "] <- " + arr[i] + "\n\n");
                    try {
                        swap(i + 1, i);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(VizAppMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JLabel te = larr[i + 1];
                    larr[i + 1] = larr[i];
                    larr[i] = te;
                    i--;
                    Algo.append("\t\ti = " + (i - 1) + "\n\n");

                }

                arr[i + 1] = key;
                Algo.append("\tarr[i+1] = " + key + "\n\n");

                Algo.append("\n\n\tArray after step " + (steps) + " : " + Arrays.toString(arr) + "\n\n");
                steps++;
            }

            order = false;
            algo = 0;
            Algo.append("\tExit for loop");
        }

        if (order == true && algo == 3) {
            int steps = 1;
            Algo.append("\tArray before sorting: " + Arrays.toString(arr) + "\n\n");
            Algo.append("Insertion Sort Starting up...\n");
            for (int j = 1; j < arr.length; j++) {
                Algo.append("\tfor (int j = " + j + " ; " + j + " < " + arr.length + "; j++)\n");
                int key = arr[j];
                Algo.append("\tkey <- " + arr[j] + "\n");
                JLabel tmp = larr[j];
                int i = j - 1;
                Algo.append("\ti <- " + (j - 1) + "\n");
                try {
                    insertCol(j);
                } catch (InterruptedException ex) {
                    Logger.getLogger(VizAppMain.class.getName()).log(Level.SEVERE, null, ex);
                }
                while (i >= 0 && arr[i] < key) {
                    Algo.append("\n\t\twhile(" + i + " >= 0 && arr[" + i + "] > " + key + ")\n");
                    try {
                        color(i + 1, i);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(VizAppMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    arr[i + 1] = arr[i];
                    Algo.append("\t\t arr[" + (i + 1) + "] <- " + arr[i] + "\n\n");
                    try {
                        swap(i + 1, i);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(VizAppMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JLabel te = larr[i + 1];
                    larr[i + 1] = larr[i];
                    larr[i] = te;
                    i--;
                    Algo.append("\t\ti = " + (i - 1) + "\n\n");

                }

                arr[i + 1] = key;
                Algo.append("\tarr[i+1] = " + key + "\n\n");
                Algo.append("\n\n\tArray after step " + (steps) + " : " + Arrays.toString(arr) + "\n\n");
                steps++;
            }

            order = false;
            algo = 0;
            Algo.append("Exit for loop");
        }

        if (order == false && algo == 4) {

            Algo.append("\tArray before sorting: " + Arrays.toString(arr) + "\n\n");
            try {
                Algo.append("\tquickSort(A, 0, " + (arr.length - 1) + " )\n\n");
                quickSort(arr, 0, (arr.length - 1), order);

            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
            Algo.append("\tArray after sorting: " + Arrays.toString(arr) + "\n\n");

        }

        if (order == true && algo == 4) {

            Algo.append("\tArray before sorting: " + Arrays.toString(arr) + "\n\n");
            try {
                Algo.append("\tquickSort(A, 0, " + (arr.length - 1) + " )\n\n");
                quickSort(arr, 0, (arr.length - 1), order);
            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
            Algo.append("\tArray after sorting: " + Arrays.toString(arr) + "\n\n");
        }

    }

    void quickSort(int arr[], int left, int right, boolean or) throws InterruptedException {
        Algo.append("\t\nvoid quickSort(int arr[], int left, int right)\n\n");
        if (or == false) {
            Algo.append("\tint q = partition(arr, left, right)\n\n");
            int index = partition(arr, left, right);
            Algo.append("\tArray after partition: " + Arrays.toString(arr) + "\n\n");
            qCol(index);
            if (left < index - 1) {
                Algo.append("\tif (" + left + " < " + (index - 1) + ")\n\n");
                Algo.append("\tquickSort(arr," + left + " , " + (index - 1) + " )\n\n");
                quickSort(arr, left, index - 1, or);
                Algo.append("\tArray after left subarray quicksort: " + Arrays.toString(arr) + "\n\n");

            }
            if (index < right) {
                Algo.append("\tif (" + index + " < " + right + ")\n\n");
                Algo.append("\tquickSort(arr," + index + " , " + right + " )\n\n");
                quickSort(arr, index, right, or);
                Algo.append("\tArray after right subarray quicksort: " + Arrays.toString(arr) + "\n\n");
            }
        } else {
            Algo.append("\tint q = partition(arr, left, right)\n\n");
            int index = partition1(arr, left, right);
            Algo.append("\tArray after partition: " + Arrays.toString(arr) + "\n\n");
            qCol(index);
            if (left < index - 1) {
                Algo.append("\tif (" + left + " < " + (index - 1) + ")\n\n");
                Algo.append("\tquickSort(arr," + left + " , " + (index - 1) + " )\n\n");
                quickSort(arr, left, index - 1, or);
                Algo.append("\tArray after left subarray quicksort: " + Arrays.toString(arr) + "\n\n");
            }
            if (index < right) {
                Algo.append("\tif (" + index + " < " + right + ")\n\n");
                Algo.append("\tquickSort(arr," + index + " , " + right + " )\n\n");
                quickSort(arr, index, right, or);
                Algo.append("\tArray after right subarray quicksort: " + Arrays.toString(arr) + "\n\n");
            }

        }

    }

    int partition(int arr[], int left, int right) throws InterruptedException {
        int i = left, j = right;
        int tmp;
        int pivot = arr[(left + right) / 2];

        while (i <= j) {
            while (arr[i] < pivot) {
                i++;
            }
            while (arr[j] > pivot) {
                j--;
            }
            if (i <= j) {
                tmp = arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;

                swap(j, i);
                JLabel tp = larr[i];
                larr[i] = larr[j];
                larr[j] = tp;

                i++;
                j--;
            }
        }

        return i;
    }

    int partition1(int arr[], int left, int right) throws InterruptedException {
        int i = left, j = right;
        int tmp;
        int pivot = arr[(left + right) / 2];

        while (i <= j) {
            while (arr[i] > pivot) {
                i++;
            }
            while (arr[j] < pivot) {
                j--;
            }
            if (i <= j) {
                tmp = arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;

                swap(j, i);
                JLabel tp = larr[i];
                larr[i] = larr[j];
                larr[j] = tp;

                i++;
                j--;
            }
        }

        return i;
    }

    void insertCol(int pos) throws InterruptedException {
        for (int i = 0; i < 10; i++) {
            larr[pos].setBackground(Color.decode("#37474F"));
            play.sleep(50);
        }

        larr[pos].setBackground(Color.decode("#03A9F4"));

    }

    void qCol(int pos) throws InterruptedException {
        for (int i = 0; i < 10; i++) {
            larr[pos].setBackground(Color.decode("#ff4444"));
            play.sleep(50);
        }

    }

    void color(int a, int b) throws InterruptedException {

        for (int i = 0; i < 20; i++) {
            larr[a].setBackground(Color.decode("#ff4444"));
            larr[b].setBackground(Color.decode("#aa66cc"));
            play.sleep(50);
        }

        larr[a].setBackground(Color.decode("#03A9F4"));
        larr[b].setBackground(Color.decode("#03A9F4"));

    }

    void swap(int a, int b) throws InterruptedException {
        larr[a].setBackground(Color.decode("#ffbb33"));
        larr[b].setBackground(Color.decode("#ffbb33"));
        play.sleep(100);

        int length = larr[a].getLocation().x - larr[b].getLocation().x;
        for (int i = 0; i < length; i++) {
            larr[a].setLocation(larr[a].getX() - 1, larr[a].getY());
            larr[b].setLocation(larr[b].getX() + 1, larr[b].getY());
            play.sleep(10);
        }

        larr[a].setBackground(Color.decode("#03A9F4"));
        larr[b].setBackground(Color.decode("#03A9F4"));

        play.sleep(10);
    }

}
